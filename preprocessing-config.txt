{
    //official data
    "official_data": {
        "unlabeled_predictors": {
            "url": "https://s3.amazonaws.com/drivendata-prod/data/7/public/702ddfc5-68cd-4d1d-a0de-f5f566f76d91.csv",
            "local_fname": "Taarifa-Unlabeled-Predictors.csv"
        },

        "labeled_predictors": {
            "url": "https://s3.amazonaws.com/drivendata-prod/data/7/public/4910797b-ee55-40a7-8668-10efd5c1b960.csv",
            "local_fname": "Taarifa-Labeled-Predictors.csv"
        },

        "labels": {
            "url": "https://s3.amazonaws.com/drivendata-prod/data/7/public/0bf8bc6e-30d0-4c50-956a-603fc693d966.csv",
            "local_fname": "Taarifa-Labels.csv"
        }
    },

    "eda_desc": {
        "short": "0.10 test_ratio"
    },

    // ratio/size of the validation data (taken from labeled predictors)
    "test_ratio": 0.10,

    //the random_state seed used throughout the project
    "SEED": 42,
    



    "feature_groupings": {
        "amount_tsh__group": {
            "description": {
                "type": "provided",
                "description": "'Total static head (amount water available to waterpoint)'"
            },

            "features": ["amount_tsh"],

            "preprocessing_options": {
                // amount_tsh is numeric, so options are as follows:
                "amount_tsh": [
                    [["amount_tsh", "C__leave_it_as_is__StrategyTransformer"]],
                    [["amount_tsh", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["amount_tsh", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["amount_tsh", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["amount_tsh", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["amount_tsh", "C__replace_0_with_nan__StrategyTransformer"]],
                    [["amount_tsh", "C__replace_outliers_with_mean__StrategyTransformer"]],
                    /*
                    [["amount_tsh", "C__replace_outliers_with_median__StrategyTransformer"]],
                    */
                    [["amount_tsh", "C__drop_it__StrategyTransformer"]]
                ]
            }
        },
        
        "gps_height__group": {
            "description": {
                "type": "provided",
                "description": "'Altitude of the well'"
            },

            "features": ["gps_height"],

            "preprocessing_options": {
                "gps_height": [
                    // gps_height is numeric, so options are as follows 
                    [["gps_height", "C__leave_it_as_is__StrategyTransformer"]],
                    [["gps_height", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["gps_height", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["gps_height", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["gps_height", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["gps_height", "C__drop_it__StrategyTransformer"]]
                ]
            }
        },
        
        "gps_coordinates__group": {
            "description": {
                "type": "provided",
                "description": "('GPS coordinate' (latitude), 'GPS coordinate' (longitude))"
            },

            "features": ["latitude", "longitude"],

            "preprocessing_options": {
                //note that these constitute an ordered-pair (of continuous values), so if we drop one we must drop the other
                //  the same holds for scaling if we do it
                //"weird" values (but not outliers) can be handled individually in each
                //NO outlier processing!
                "gps_coordinates": [
                    [
                        ["gps_coordinates", "C__required_proprocessing__gps_coordinates__StrategyTransformer"]
                    ],
                    [
                        ["latitude", "C__drop_it__StrategyTransformer"],
                        ["longitude", "C__drop_it__StrategyTransformer"]
                    ]
                ]
            }
        },
        
        "wpt_name__group": {
            "description": {
                "type": "provided",
                "description": "'Name of the waterpoint if there is one'"
            },

            "features": ["wpt_name"],

            "preprocessing_options": {
                // wpt_name is categorical-string, so leaving it as is is not an option; options are as follows:
                "wpt_name": [[["wpt_name", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "num_private__group": {
            "description": {
                "type": "provided",
                "description": "" //no description was provided, so we don't really know what this is based purely on description
            },

            "features": ["num_private"],

            "preprocessing_options": {
                // num_private is numeric and 98% of the observations consist of a single value - there is only one thing to do
                "num_private": [[["num_private", "C__drop_it__StrategyTransformer"]]]
            }
        },
        
        "basin__group": {
            "description": {
                "type": "provided",
                "description": "'Geographic water basin'"
            },

            "features": ["basin"],

            "preprocessing_options": {
                // basin is categorical-string, so leaving it as is is not an option; options are as follows:
                "basin": [
                    [
                        ["basin", "C__required_proprocessing__basin__StrategyTransformer"],
                        ["basin", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["basin", "C__required_proprocessing__basin__StrategyTransformer"],
                        ["basin", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["basin", "C__required_proprocessing__basin__StrategyTransformer"],
                        ["basin", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["basin", "C__required_proprocessing__basin__StrategyTransformer"],
                        ["basin", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    */
                    [["basin", "C__drop_it__StrategyTransformer"]]
                ]
            }
        },
        
        "geographic_location__group": {
            "description": {
                "type": "provided",
                "description": "'Geographic location'"
            },

            "features": ["region_code", "district_code", "subvillage", "region", "lga", "ward"],

            "preprocessing_options": {
                // region_code is clearly categorical (numeric, not ordinal):
                "region_code": [
                    [["region_code", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["region_code", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["region_code", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["region_code", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["region_code", "C__drop_it__StrategyTransformer"]]
                ],

                // district_code is clearly categorical (numeric, not ordinal):
                "district_code": [
                    [["district_code", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["district_code", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["district_code", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["district_code", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["district_code", "C__drop_it__StrategyTransformer"]]
                ],

                "subvillage": [[["subvillage", "C__drop_it__StrategyTransformer"]]],
                
                "region": [[["region", "C__drop_it__StrategyTransformer"]]],

                "region": [[["region", "C__drop_it__StrategyTransformer"]]],

                "lga": [[["lga", "C__drop_it__StrategyTransformer"]]],

                "lga": [[["lga", "C__drop_it__StrategyTransformer"]]],

                "ward": [[["ward", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "population__group": {
            "description": {
                "type": "provided",
                "description": "'Population around the well'"
            },

            "features": ["population"],

            "preprocessing_options": {
                // population is numeric, so options are as follows 
                "population": [
                    [["population", "C__leave_it_as_is__StrategyTransformer"]],
                    [["population", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["population", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["population", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["population", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["population", "C__replace_0_with_nan__StrategyTransformer"]],
                    [["population", "C__replace_outliers_with_mean__StrategyTransformer"]],

                    //out of curiosity, try stacked mean (on top of mean) outlier replacement
                    [
                        ["population", "C__replace_outliers_with_mean__StrategyTransformer"],
                        ["population", "C__replace_outliers_with_mean__StrategyTransformer"]
                    ],

                    [["population", "C__replace_outliers_with_median__StrategyTransformer"]],
                    [["population", "C__leave_it_as_is__StrategyTransformer"]]
                ]
            }
        },

        "public_meeting__group": {
            "description": {
                "type": "provided",
                "description": "'True/False'"
            },

            "features": ["public_meeting"],

            "preprocessing_options": {
                // public_meeting is clearly boolean
                "public_meeting": [
                    [
                        ["public_meeting", "C__required_proprocessing__public_meeting__StrategyTransformer"],
                        ["public_meeting", "C__leave_it_as_is__StrategyTransformer"]
                    ],
                    [["public_meeting", "C__drop_it__StrategyTransformer"]]
                ]
            }
        },

        "recorded_by__group": {
            "description": {
                "type": "provided",
                "description": "'Group entering this row of data'"
            },

            "features": ["recorded_by"],

            "preprocessing_options": {
                // recorded_by consists of a single value - there is only one thing to do
                "recorded_by": [
                    [["recorded_by", "C__drop_it__StrategyTransformer"]]
                ]
            }
        },
        
        "permit__group": {
            "description": {
                "type": "provided",
                "description": "'True/False'"
            },

            "features": ["permit"],

            "preprocessing_options": {
                // permit is clearly boolean
                "permit": [
                    [
                        ["permit", "C__required_proprocessing__permit__StrategyTransformer"],
                        ["permit", "C__leave_it_as_is__StrategyTransformer"]
                    ],
                    [["permit", "C__drop_it__StrategyTransformer"]]
                ]
            }
        },

        "wpt_extraction_type_class__group": {
            "description": {
                "type": "provided",
                "description": "'The kind of extraction the waterpoint uses'"
            },

            "features": ["extraction_type", "extraction_type_group", "extraction_type_class"],

            "preprocessing_options": {
                // extraction_type is categorical-string, so leaving it as is is not an option; options are as follows:
                "extraction_type": [
                    [["extraction_type", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["extraction_type", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["extraction_type", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["extraction_type", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["extraction_type", "C__drop_it__StrategyTransformer"]]
                ],

                "extraction_type_group": [[["extraction_type_group", "C__drop_it__StrategyTransformer"]]],

                "extraction_type_class": [[["extraction_type_class", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "wpt_management__group": {
            "description": {
                "type": "provided",
                "description": "'How the waterpoint is managed'"
            },

            "features": ["management", "management_group"],

            "preprocessing_options": {
                // management is categorical-string, so leaving it as is is not an option; options are as follows:
                "management": [
                    [["management", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["management", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["management", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["management", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["management", "C__drop_it__StrategyTransformer"]]
                ],

                "management_group": [[["management_group", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "payment_frequency_class__group": {
            "description": {
                "type": "provided",
                "description": "'What the water costs'" // this is an awful description, actually, but whatever...
            },

            "features": ["payment", "payment_type"],

            "preprocessing_options": {
                // payment_type is categorical-string, so leaving it as is is not an option; options are as follows:
                "payment_type": [
                    [["payment_type", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["payment_type", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["payment_type", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["payment_type", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["payment_type", "C__drop_it__StrategyTransformer"]]
                ],

                "payment": [[["payment", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "water_quality_class__group": {
            "description": {
                "type": "provided",
                "description": "'The quality of the water'"
            },

            "features": ["water_quality", "quality_group"],

            "preprocessing_options": {
                // water_quality is categorical-string, so leaving it as is is not an option; options are as follows:
                "water_quality": [
                    [["water_quality", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["water_quality", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["water_quality", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["water_quality", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["water_quality", "C__drop_it__StrategyTransformer"]]
                ],

                "quality_group": [[["quality_group", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "water_quantity_class__group": {
            "description": {
                "type": "provided",
                "description": "'The quantity of water'"
            },

            "features": ["quantity", "quantity_group"],

            "preprocessing_options": {
                // quantity is categorical-string, so leaving it as is is not an option; options are as follows:
                "quantity": [
                    [["quantity", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["quantity", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["quantity", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["quantity", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["quantity", "C__drop_it__StrategyTransformer"]]
                ],

                "quantity_group": [[["quantity_group", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "water_source_type_class__group": {
            "description": {
                "type": "provided",
                "description": "'The source of the water'"
            },

            "features": ["source", "source_type", "source_class"],

            "preprocessing_options": {
                // source is categorical-string, so leaving it as is is not an option; options are as follows:
                "source": [
                    [["source", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["source", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["source", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["source", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["source", "C__drop_it__StrategyTransformer"]]
                ],

                "source_type": [[["source_type", "C__drop_it__StrategyTransformer"]]],

                "source_class": [[["source_class", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "wpt_type_class__group": {
            "description": {
                "type": "provided",
                "description": "'The kind of waterpoint'"
            },

            "features": ["waterpoint_type", "waterpoint_type_group"],

            "preprocessing_options": {
                // waterpoint_type is categorical-string, so leaving it as is is not an option; options are as follows:
                "waterpoint_type": [
                    [["waterpoint_type", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    /*
                    [["waterpoint_type", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["waterpoint_type", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]],
                    [["waterpoint_type", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]],
                    */
                    [["waterpoint_type", "C__drop_it__StrategyTransformer"]]
                ],

                "waterpoint_type_group": [[["waterpoint_type_group", "C__drop_it__StrategyTransformer"]]]
            }
        },

        "pump_age_at_observation_date__group": {
            "description": {
                "type": "engineered",
                "description": "'The date the row was entered' - 'Year the waterpoint was constructed'"
            },

            "features": ["date_recorded", "construction_year"],

            "preprocessing_options": {
                // pump_age is a NEW/engineered feature, so there is only one option (which is done in required preprocessing) (we can NOT create it, which would mean leaving date_recorded and construction_year as is):
                "pump_age": [
                    [
                        ["date_recorded", "C__drop_it__StrategyTransformer"], // date_recorded starts as a string so we cannot use it as is
                        ["construction_year", "C__leave_it_as_is__StrategyTransformer"] // construction_year starts as an int so we CAN use it as is
                    ],
                    [
                        ["date_recorded", "C__required_proprocessing__date_recorded__StrategyTransformer"], // date_recorded starts as a string, this converts it to datetime type
                        ["construction_year", "C__required_proprocessing__construction_year__StrategyTransformer"], // construction_year starts as an int, this converts it to datetime type and replaces some weird values
                        ["construction_year", "C__convert_to_int__construction_year__StrategyTransformer"],
                        ["date_recorded", "C__convert_to_int__date_recorded__StrategyTransformer"]  // we need to do this last since C__required_proprocessing__construction_year__StrategyTransformer uses date_recorded (as datetime type)
                    ],
                    [
                        ["pump_age", "C__required_proprocessing__pump_age__StrategyTransformer"]
                    ],
                    [
                        ["date_recorded", "C__drop_it__StrategyTransformer"],
                        ["construction_year", "C__drop_it__StrategyTransformer"]    
                    ]
                ]
            }
        },




        //these are the HARD, processing intensive feature-groups
        "funder__group": {
            "description": {
                "type": "provided",
                "description": "'Who funded the well'"
            },

            "features": ["funder"],

            "preprocessing_options": {
                // funder is categorical-string, so leaving it as is is not an option
                //      note that if this feature is kept, then it must ALWAYS be preprocessed with C__required_proprocessing__funder__StrategyTransformer FIRST
                //          before subsequent processing - in this case, preprocessing (within that class) includes converting to lcase, etc. but see class for details
                //      options are as follows:
                "funder": [
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    */
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__tfidf_kmeans_classify__funder__StrategyTransformer"], //new feature funder_tfidf_kmeans_class exists after this
                        ["funder_tfidf_kmeans_class", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"], //new feature funder_tfidf_kmeans_class_target_encoded exists after this, implicitly drops funder_tfidf_kmeans_class
                        ["funder", "C__drop_it__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__tfidf_kmeans_classify__funder__StrategyTransformer"], //new feature funder_tfidf_kmeans_class exists after this
                        ["funder_tfidf_kmeans_class", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"], //new feature funder_tfidf_kmeans_class_target_encoded exists after this, implicitly drops funder_tfidf_kmeans_class
                        ["funder", "C__drop_it__StrategyTransformer"]
                    ],
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__tfidf_kmeans_classify__funder__StrategyTransformer"], //new feature funder_tfidf_kmeans_class exists after this
                        ["funder_tfidf_kmeans_class", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"], //new feature funder_tfidf_kmeans_class_target_encoded exists after this, implicitly drops funder_tfidf_kmeans_class
                        ["funder", "C__drop_it__StrategyTransformer"]
                    ],
                    [
                        ["funder", "C__required_proprocessing__funder__StrategyTransformer"],
                        ["funder", "C__tfidf_kmeans_classify__funder__StrategyTransformer"], //new feature funder_tfidf_kmeans_class exists after this
                        ["funder_tfidf_kmeans_class", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"], //new feature funder_tfidf_kmeans_class_target_encoded exists after this, implicitly drops funder_tfidf_kmeans_class
                        ["funder", "C__drop_it__StrategyTransformer"]
                    ],
                    */
                    [
                        ["funder", "C__drop_it__StrategyTransformer"]
                    ]
                ]
            }
        },

        "installer__group": {
            "description": {
                "type": "provided",
                "description": "'Organization that installed the well'"
            },

            "features": ["installer"],

            "preprocessing_options": {
                // installer is categorical-string, so leaving it as is is not an option; options are as follows:
                "installer": [
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    */
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__tfidf_kmeans_classify__installer__StrategyTransformer"], //new feature installer_tfidf_kmeans_class exists after this
                        ["installer_tfidf_kmeans_class", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"], //new feature installer_tfidf_kmeans_class_target_encoded exists after this, implicitly drops installer_tfidf_kmeans_class
                        ["installer", "C__drop_it__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__tfidf_kmeans_classify__installer__StrategyTransformer"], //new feature installer_tfidf_kmeans_class exists after this
                        ["installer_tfidf_kmeans_class", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"], //new feature installer_tfidf_kmeans_class_target_encoded exists after this, implicitly drops installer_tfidf_kmeans_class
                        ["installer", "C__drop_it__StrategyTransformer"]
                    ],
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__tfidf_kmeans_classify__installer__StrategyTransformer"], //new feature installer_tfidf_kmeans_class exists after this
                        ["installer_tfidf_kmeans_class", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"], //new feature installer_tfidf_kmeans_class_target_encoded exists after this, implicitly drops installer_tfidf_kmeans_class
                        ["installer", "C__drop_it__StrategyTransformer"]
                    ],
                    [
                        ["installer", "C__required_proprocessing__installer__StrategyTransformer"],
                        ["installer", "C__tfidf_kmeans_classify__installer__StrategyTransformer"], //new feature installer_tfidf_kmeans_class exists after this
                        ["installer_tfidf_kmeans_class", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"], //new feature installer_tfidf_kmeans_class_target_encoded exists after this, implicitly drops installer_tfidf_kmeans_class
                        ["installer", "C__drop_it__StrategyTransformer"]
                    ],
                    */
                    [
                        ["installer", "C__drop_it__StrategyTransformer"]
                    ]
                ]
            }
        },

        "wpt_operator__group": {
            "description": {
                "type": "provided",
                "description": "'Who operates the waterpoint'"
            },

            "features": ["scheme_management", "scheme_name"],

            "preprocessing_options": {
                // scheme_management is categorical-string, so leaving it as is is not an option; options are as follows:
                "scheme_management": [
                    [
                        ["scheme_management", "C__required_proprocessing__scheme_management__StrategyTransformer"],
                        ["scheme_management", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["scheme_management", "C__required_proprocessing__scheme_management__StrategyTransformer"],
                        ["scheme_management", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["scheme_management", "C__required_proprocessing__scheme_management__StrategyTransformer"],
                        ["scheme_management", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["scheme_management", "C__required_proprocessing__scheme_management__StrategyTransformer"],
                        ["scheme_management", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    */
                    [["scheme_management", "C__drop_it__StrategyTransformer"]]
                ],

                // scheme_name is categorical-string, so leaving it as is is not an option; options are as follows:
                "scheme_name": [
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"]
                    ],
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"]
                    ]
                    */
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__tfidf_kmeans_classify__scheme_name__StrategyTransformer"], //new feature scheme_name_tfidf_kmeans_class exists after this
                        ["scheme_name_tfidf_kmeans_class", "C__target_encode__not_LOO__post_encode_null_to_global_mean__StrategyTransformer"], //new feature scheme_name_tfidf_kmeans_class_target_encoded exists after this, implicitly drops scheme_name_tfidf_kmeans_class
                        ["scheme_name", "C__drop_it__StrategyTransformer"]
                    ],
                    /*
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__tfidf_kmeans_classify__scheme_name__StrategyTransformer"], //new feature installer_tfidf_kmeans_class exists after this
                        ["scheme_name_tfidf_kmeans_class", "C__target_encode__not_LOO__not_post_encode_null_to_global_mean__StrategyTransformer"], //new feature installer_tfidf_kmeans_class_target_encoded exists after this, implicitly drops installer_tfidf_kmeans_class
                        ["scheme_name", "C__drop_it__StrategyTransformer"]
                    ],
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__tfidf_kmeans_classify__scheme_name__StrategyTransformer"], //new feature installer_tfidf_kmeans_class exists after this
                        ["scheme_name_tfidf_kmeans_class", "C__target_encode__LOO__post_encode_null_to_global_mean__StrategyTransformer"], //new feature installer_tfidf_kmeans_class_target_encoded exists after this, implicitly drops installer_tfidf_kmeans_class
                        ["scheme_name", "C__drop_it__StrategyTransformer"]
                    ],
                    [
                        ["scheme_name", "C__required_proprocessing__scheme_name__StrategyTransformer"],
                        ["scheme_name", "C__tfidf_kmeans_classify__scheme_name__StrategyTransformer"], //new feature installer_tfidf_kmeans_class exists after this
                        ["scheme_name_tfidf_kmeans_class", "C__target_encode__LOO__not_post_encode_null_to_global_mean__StrategyTransformer"], //new feature installer_tfidf_kmeans_class_target_encoded exists after this, implicitly drops installer_tfidf_kmeans_class
                        ["scheme_name", "C__drop_it__StrategyTransformer"]
                    ],
                    */
                    [
                        ["scheme_name", "C__drop_it__StrategyTransformer"]
                    ]
                ]
            }
        }
    },




    "wrangled_data": {
        "dir": "preprocessing-results",
        
        "fname_ext": "csv",

        "train": {
            "fname_prefix": "wrangled-labeled-data-train"
        },
        "test": {
            "fname_prefix": "wrangled-labeled-data-test"
        },
        "unlabeled": {
            "fname_prefix": "wrangled-unlabeled-data"
        }
    },

    "labels": {
        "dir": "preprocessing-results",
        
        "fname_ext": "csv",

        "train": {
            "fname_prefix": "labels-train"
        },
        "test": {
            "fname_prefix": "labels-test"
        }
    }
}